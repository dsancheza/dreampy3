"""Description of redshift header values for
the NetCDF File headers"""

import numpy

dimensions = {
    "chassis" : {
        "numcards" : 6,
        "numchannels" : 256,
        "scalarval" : 1,
        "Errormes_slen" : 50,
        "Hardware_Version_slen" : 10,
        "Software_Version_slen" : 10,
        "Probemes_slen" : 100,
        "date_slen" : 50,
        },
    "Source" : {
        "SourceName_slen" : 16,
        "Az_xlen" : 2,
        "El_xlen" : 2,
        "Ra_xlen" : 2,
        "Dec_xlen" : 2,
        "L_xlen" : 2,
        "B_xlen" : 2,
        },
    "Sky" : {
        "AzOff" : 2,
        "ElOff" : 2,
        "RaOff" : 2,
        "DecOff" : 2,
        "LOff" : 2,
        "BOff" : 2,
        },
    "Telescope" : {
        "Operator_slen" : 24,
        },
    "Dcs" : {
        "ObsPgm" : 128,
        "Receiver" : 128,
        "Timer_xlen" : 3,
        },
    }
        
    

header_variables_dict = {
    "chassis" : {
        "Errormes" : {"type" : numpy.dtype('S1'),
                      "dim" : ("Errormes_slen",),
                      "attributes" : {"long_name": "Error message in English from RSR"},
                      "name" : "Errormes",
                      },
        "Hardware_Version" : {"type" : numpy.dtype(float),
                              "dim" : ("numcards",),
                              "attributes" : {"long_name": "FPGA Hardware version"},
                              "name" : 'HwVersion',
                              },
        "Software_Version" : {"type" : numpy.dtype(float),
                              "dim" : ("numcards",),
                              "attributes" : {"long_name": "Software version"},
                              "name" : 'SwVersion',
                              },    
        "Probemes" : {"type" : numpy.dtype('S1'),
                      "dim" : ("Probemes_slen",),
                      "attributes" : {"long_name": "English version of Probed Hardware messag#e"},
                      "name" : "Probemes",
                      },
        "blank" : {"type" : numpy.dtype(int),
                   "dim" : ("numcards",),
                   "attributes" : {"long_name": "Blanking switch (one of 0,1,2)"},
                   "name" : "Blank",
                   },
        "polar_demod" : {"type" : numpy.dtype(int),
                         "dim" : ("numcards",),
                         "attributes" : {"long_name": "Polar Demodulation Switch (one of 0,1,2)"},
                         "name" : "PolarDemod",
                         },
        "polar_out" : {"type" : numpy.dtype(int),
                       "dim" : ("numcards",),
                       "attributes" : {"long_name": "Polar Out switch (one of 0,1,2)"},
                       "name" : "PolarOut",
                       },
        "swta" : {"type" : numpy.dtype(int),
                  "dim" : ("numcards",),
                  "attributes" : {"long_name": "SWTA Switch (one of 0,1,2)"},
                  "name" : "SwtA",
                  },
        "swtb" : {"type" : numpy.dtype(int),
                  "dim" : ("numcards",),
                  "attributes" : {"long_name": "SWTB Switch (one of 0,1,2)"},
                  "name" : "SwtB",
                  },
        "refacc" : {"type" : numpy.dtype(int),
                    "dim" : ("numcards",),
                    "attributes" : {"long_name": "REFACC Switch (one of 0,1,2)"},
                    "name" : "RefAcc",
                    },        
        "board" : {"type" : numpy.dtype(int),
                   "dim" : ("numcards",),
                   "attributes" : {"long_name": "Board number (one of 1,2,3,4,5,6)"},
                   "name" : "BoardNumber",
                   },
        "boardid" : {"type" : numpy.dtype(int),
                     "dim" : ("numcards",),
                     "attributes" : {"long_name": "Board ID as inscribed on board, and programmed on card."},
                     "name" : "DipBid",
                     },
        "chassis" : {"type" : numpy.dtype(int),
                     "dim" : ("scalarval",),
                     "attributes" : {"long_name": "Chassis Number for the board (one of 0,1,2,3)"},
                     "name" : "Chassis",
                     },    
        "corr_cal_id" : {"type" : numpy.dtype(int),
                         "dim" : ("numcards",),
                         "attributes" : {"long_name": "corr cal id for each board"},
                         "name" : "CorrCalId",
                         },    
        "date" : {"type": numpy.dtype("S1"),
                  "dim" : ("date_slen",),
                  "attributes" : {"long_name" : "Date String of when the data was taken"},
                  "name" : "date",
                  },
        "error" : {"type": numpy.dtype(int),
                   "dim" : ("scalarval",),
                   "attributes" : {"long_name" : "Same as Errormes, but just an integer"},
                   "name" : "error",
                   },
        "gain" : {"type" : numpy.dtype(int),
                  "dim" : ("numcards", ),
                  "attributes" : {"long_name" : "Gain set in frequency converter box for each card"},
                  "name" : "Gain",
                  },
        "main_acf_count" : {"type" : numpy.dtype(int),
                            "dim" : ("numcards", ),
                            "attributes" : {"long_name" : "The returned count of number of samples for each board accumulated"},
                            "name" : "TargetCount",
                            },
        
        "slotno" : {"type" : numpy.dtype(int),
                    "dim" : ("numcards",),
                    "attributes" : {"long_name" : "VME Slot number for correlator card"},
                    "name" : "SlotNumber",
                    },
        "target_size" : {"type" : numpy.dtype(int),
                         "dim" : ("scalarval",),
                         "attributes" : {"long_name" : "Specified target Size"},
                         "name" : "TargetSize",
                         },
        "storage_mode" : {"type" : numpy.dtype(int),
                          "dim" : ("scalarval",),
                          "attributes" : {"long_name" : "storage mode (0: store mode, 1: Accumulate)"},
                          "name" : "StorageMode",
                          },
        "integ_status" : {"type" : numpy.dtype(int),
                          "dim" : ("scalarval",),
                          "attributes" : {"long_name" : "integration status (0: continuous, 1: Timed)"},
                          "name" : "IntegStatus",
                          }
        },
    "Source" : {
        "SourceName" : {"type" : numpy.dtype("S1"),
                        "dim" : ("Header.Source.SourceName_slen", ),
                        "attributes" : {"long_name": "Source Name"},
                        "name" : "SourceName",
                        },
        "Epoch" : {"type" : numpy.dtype(float),
                   "dim" : ("scalarval", ),
                   "attributes" : {"long_name" : "Epoch of observations"},
                   "name" : "Epoch",
                   },
        
    
        }
    }



data_variables_dict = {
    "AccData" : {"type" : numpy.dtype(float),
                 "dim" : ("numcards", "numchannels"),
                 "attributes" : {"long_name" : "data array, the data from polar_demod"}
               },
    "RefData" : {"type" : numpy.dtype(float),
                 "dim" : ("numcards", "numchannels"),
                 "attributes" : {"long_name" : "reference accumulator array, the data from refacc"}
               }    
    }
